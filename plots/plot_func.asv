%% Function to visualize hexaroter trajectories in 3D

% Initialize and load data
clc; clear; close all;
states = load("matfile.mat");

% Create matrix with RGB values for each color
colorMatrix = ["blue"; "magenta"; "cyan"];

% Define a cell array of line types
lineTypes = {'-', '-', '-'};

% Loop over trajectory data
figure(1);
two_dim = true;
for jj = 1:numel(states.states)

    % Extract trajectory
    dynamics_trajectory = states.states{jj};
    
    % Define trajectory in xyz-plane
    xyz_trajectory = extract_xyz(dynamics_trajectory);

    % Specify linewidth
    lineWidth = 2;

    if two_dim == true
        hold on
    end
    
    % Plot trajectories
    segmentColor = colorMatrix(jj,:);
    current_figure = plot3(xyz_trajectory(1,:), xyz_trajectory(2,:), xyz_trajectory(3,:), lineTypes{jj}, 'LineWidth', lineWidth, ...
        'Color', segmentColor);

    if two_dim == false
        hold on
    end

    % Type scatter
    scatter_plot = true;
    if scatter_plot == true
        scatter3(xyz_trajectory(1,:), xyz_trajectory(2,:), ...
            xyz_trajectory(3,:), 70, segmentColor, 'filled', ...
            'MarkerFaceAlpha', 0.5, 'HandleVisibility', 'off')
    end

end

% Create patches
start_goal()
create_patchYZ(1)
create_patchYZ(-1)
create_patchXZ(1)
create_patchXZ(-1)
create_patchXY(-6)

% Labels
set(groot,'DefaultTextFontName','Times New Roman');
xlabel('x [m]','FontName','Times New Roman', 'FontSize', 12)
ylabel('y [m]','FontName','Times New Roman', 'FontSize', 10)
zlabel('z [m]','FontName','Times New Roman', 'FontSize', 10)
xlim([-1.5, 1.5])
ylim([-1.5, 1.5])
grid on
hold off

% Legend
labels = {'\color{black} Non-Robust', ...
          '\color{black} Unitary-consensus', ...
          '\color{black} FGMPC'};
legend(labels, 'Location', 'NorthWest', 'FontSize', 10, 'FontName', 'cmr12',...
    'TextColor', 'black');

% Save figure (pdf)
% print('trajectory.pdf', '-dpdf', '-r300');
if two_dim == true
    print(gcf,'topview.png','-dpng','-r300')
elseif two_dim == false
    print(gcf,'3dtrajectory.png','-dpng','-r300')
end

%% Functions
function xyz = extract_xyz(dynamics_trajectory)

    x = dynamics_trajectory(1,:);
    y = dynamics_trajectory(2,:);
    z = - dynamics_trajectory(3,:);

    xyz = [x; y; z];
end

function create_patchYZ(loc)

    % Define the range of coordinates
    y_range = [-1, 1];
    z_range = [-6, 0];
    
    % Define the vertices of the patch
    vertices = [loc, y_range(1), z_range(2);  % bottom left corner
                loc, y_range(2), z_range(2);  % top left corner
                loc, y_range(2), z_range(1);  % top right corner
                loc, y_range(1), z_range(1)]; % bottom right corner
    
    % Define the faces of the patch
    faces = [1, 2, 3, 4];
    
    % Create the patch object and plot it
%     patch('Vertices', vertices, 'Faces', faces, ...
%         'FaceColor', 'blue', 'FaceAlpha', 0.2);

    patch('Vertices', vertices, 'Faces', faces, ...
        'FaceColor', [0.5 0.5 0.5], 'FaceAlpha', 0.2);

end

function create_patchXZ(loc)

    % Define the range of coordinates
    x_range = [-1, 1];
    z_range = [-6, 0];
    
    % Define the vertices of the patch
    vertices = [x_range(1), loc, z_range(2);  % bottom left corner
                x_range(2), loc, z_range(2);  % bottom right corner
                x_range(2), loc, z_range(1);  % top right corner
                x_range(1), loc, z_range(1)]; % top left corner
    
    % Define the faces of the patch
    faces = [1, 2, 3, 4];
    
    % Create the patch object and plot it
    patch('Vertices', vertices, 'Faces', faces,...
        'FaceColor',  [0.5 0.5 0.5], 'FaceAlpha', 0.2);

end

function create_patchXY(loc)

    % Define height for rectangular patch
    zHeight = loc;
    % Define vertices for rectangular patch
    
    x = [-1 -1 1 1];
    y = [-1 1 1 -1];
    z = [zHeight zHeight zHeight zHeight];
    
    % Define color for rectangular patch
    rectPatchColor = [0.5 0.5 0.5];
    
    % Plot rectangular patch using patch function
    patch(x, y, z, rectPatchColor, 'FaceColor',  [0.5 0.5 0.5], ...
        'FaceAlpha', 0.2);

end

function start_goal()
    % Define the coordinates of your circles
    start_coord = [0, 0, 0];
    goal_coord = [-0.4, 0.4, -5];

    % Add the start circle
    a = scatter3(start_coord(1), start_coord(2), start_coord(3), 200, ...
        'k', 'filled', 'MarkerFaceAlpha', 0.75);
%     text(start_coord(1), start_coord(2)+0.7, start_coord(3)-0.2, 'start');
    text(start_coord(1)-0.30, start_coord(2)-0.15, start_coord(3)+0.90, 'start');

    % Add the goal cross
    b = scatter3(goal_coord(1), goal_coord(2), goal_coord(3), 200, ...
        'r', 'filled', 'MarkerFaceAlpha', 1);
    
    text(goal_coord(1)-0.25, goal_coord(2) - 0.12, goal_coord(3)-0.20, 'goal');
%     text(goal_coord(1)-0.2, goal_coord(2), goal_coord(3)-0.5, 'goal');

end



